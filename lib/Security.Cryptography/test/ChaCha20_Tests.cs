using GnomeStack.Security.Cryptography;

namespace Tests;

// ReSharper disable once InconsistentNaming
public class ChaCha20_Tests
{
    [UnitTest]
    public void ChaCha_8Round_TestVector()
    {
        // https://github.com/secworks/chacha_testvectors/blob/master/src/chacha_testvectors.txt
        var key = new byte[]
        {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        };

        var iv = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, };
        var data = new byte[]
        {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        };

        var buffer = new byte[64];

        var r1 = new byte[]
        {
            0xe2, 0x8a, 0x5f, 0xa4, 0xa6, 0x7f, 0x8c, 0x5d,
            0xef, 0xed, 0x3e, 0x6f, 0xb7, 0x30, 0x34, 0x86,
            0xaa, 0x84, 0x27, 0xd3, 0x14, 0x19, 0xa7, 0x29,
            0x57, 0x2d, 0x77, 0x79, 0x53, 0x49, 0x11, 0x20,
            0xb6, 0x4a, 0xb8, 0xe7, 0x2b, 0x8d, 0xeb, 0x85,
            0xcd, 0x6a, 0xea, 0x7c, 0xb6, 0x08, 0x9a, 0x10,
            0x18, 0x24, 0xbe, 0xeb, 0x08, 0x81, 0x4a, 0x42,
            0x8a, 0xab, 0x1f, 0xa2, 0xc8, 0x16, 0x08, 0x1b,
        };

        var r2 = new byte[]
        {
            0x8a, 0x26, 0xaf, 0x44, 0x8a, 0x1b, 0xa9, 0x06,
            0x36, 0x8f, 0xd8, 0xc8, 0x38, 0x31, 0xc1, 0x8c,
            0xec, 0x8c, 0xed, 0x81, 0x1a, 0x02, 0x8e, 0x67,
            0x5b, 0x8d, 0x2b, 0xe8, 0xfc, 0xe0, 0x81, 0x16,
            0x5c, 0xea, 0xe9, 0xf1, 0xd1, 0xb7, 0xa9, 0x75,
            0x49, 0x77, 0x49, 0x48, 0x05, 0x69, 0xce, 0xb8,
            0x3d, 0xe6, 0xa0, 0xa5, 0x87, 0xd4, 0x98, 0x4f,
            0x19, 0x92, 0x5f, 0x5d, 0x33, 0x8e, 0x43, 0x0d,
        };

        using var algo = ChaCha20.Create();
        algo.Key = key;
        algo.IV = iv;
        algo.Rounds = ChaChaRound.Eight;
        algo.SkipXor = false;
        algo.Counter = 0;
        using var encryptor = algo.CreateEncryptor();
        encryptor.TransformBlock(data, 0, data.Length, buffer, 0);

        Assert.True(buffer.SequenceEqual(r1));
        buffer = encryptor.TransformFinalBlock(data, 0, data.Length);
        Assert.True(buffer.SequenceEqual(r2));
    }
}